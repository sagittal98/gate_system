<?xml version="1.0" encoding="UTF-8"?>

<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
    <display-name>intimate-web</display-name>

    <!--配置spring的核心监听器
      作用：在tomcat启动的时候，创建spring 的工厂类对象，把工厂类对象绑定到tomcat的上下文中
      以前写java项目第一步都是创建spring的工厂类对象
      ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
      运行web项目还需不需要spring的工厂类对象？需要的。什么时候创建比较合适？tommcat启动的时候创建比
      较合适。
      所以spring就为我们提供了一个监听器来实现这些代码。
      -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 防止Spring内存溢出监听器 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>


    <!-- 添加druid监控-->
    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>
    <!-- 添加Web应用等监控-->
    <filter>
        <filter-name>DruidWebStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <init-param>
            <param-name>exclusions</param-name>
            <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
        </init-param>
        <init-param>
            <param-name>profileEnable</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>principalCookieName</param-name>
            <param-value>USER_COOKIE</param-value>
        </init-param>
        <init-param>
            <param-name>principalSessionName</param-name>
            <param-value>USER_SESSION</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>DruidWebStatFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--手动指定spring 主配置文件的位置和名称
    默认spring会从WEB-INF目录下加载applicationContext.xml作为spring的主配置文件，但是一般我们不喜欢把主
    配置文件放到这个地方
    ，我们习惯放到resources目录下，所以一般都会手动指定spring 主配置文件的位置和名称
    -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/spring-dao.xml</param-value>
    </context-param>

    <!--spring mvc的前端控制器
  作用：拦截相应的请求 交给spring mvc处理
  -->

    <servlet>
        <servlet-name>spring-mvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--手动指定spring mvc的主配置文件位置和名称
        默认spring mvc会从WEB-INF下去加载[servlet的name]-servlet.xml 这个主配置文件，针对当前的例子
        主配置文件的名称应该是spring-mvc-servlet.xml. 一般我们还是希望把spring mvc的主配置文件放到resources下
        面，所以一般都会
        手动指定该项
        -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/spring-mvc-servlet.xml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>spring-mvc</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>


    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>
